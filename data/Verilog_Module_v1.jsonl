{"task_id": 12, "completion": "module dividerp1(input wire clk, output wire clk_out);"}
{"task_id": 11, "completion": "module wdt(\n    input clk,         // \u65f6\u949f\u4fe1\u53f7\n    input ena,        // \u4f7f\u80fd\u4fe1\u53f7\n    input cnt,        // \u8ba1\u6570\u4fe1\u53f7\n    output out        // \u8f93\u51fa\u4fe1\u53f7\n);"}
{"task_id": 10, "completion": "module t (input clk);"}
{"task_id": 16, "completion": "module processing_system7_v5_5_trace_buffer #(  parameter integer FIFO_SIZE = 128,  parameter integer USE_TRACE_DATA_EDGE_DETECTOR = 0,  parameter integer C_DELAY_CLKS = 12  )(   input wire TRACE_CLK,   input wire RST,   input wire TRACE_VALID_IN,   input wire [3:0] TRACE_ATID_IN,   input wire [31:0] TRACE_DATA_IN,   output wire TRACE_VALID_OUT,   output wire [3:0] TRACE_ATID_OUT,   output wire [31:0] TRACE_DATA_OUT  );"}
{"task_id": 13, "completion": "module log2_table(\n\tinput\tclk,\n\tinput\ttrilinear_en,\n\tinput\t[31:0]val,\n\toutput\t[9:0]log2\n);"}
{"task_id": 14, "completion": "module uart\n\t#(\n\t\tparameter DBIT = 8,\n\t\tparameter SB_TICK = 16,\n\t\tparameter DVSR = 163,\n\t\tparameter DVSR_BIT = 8,\n\t\tparameter FIFO_W = 4\n\t)\n\t(\n\t\tinput wire clk,\n\t\tinput wire reset,\n\t\tinput wire rd_uart,\n\t\tinput wire rx,\n\t\tinput wire wr_uart,\n\t\tinput wire [DBIT-1:0] w_data,\n\t\toutput wire rx_empty,\n\t\toutput wire tx_done_tick,\n\t\toutput wire tx,\n\t\toutput wire [DBIT-1:0] r_data\n\t);"}
{"task_id": 9, "completion": "module stepgen(  input clk,    // \u65f6\u949f\u4fe1\u53f7  input enable,  output [W+F-1:0] position, reg [W+F-1:0] position,  input [F:0] velocity,  input [T-1:0] dirtime, steptime,  input [1:0] tap,  output step, dir, reg step, dir);"}
{"task_id": 15, "completion": "module Rotate_Mux_Array\n    #(parameter SWR=26)\n    (\n    input wire [SWR-1:0] Data_i,\n    input wire select_i,\n    output wire [SWR-1:0] Data_o\n    );"}
{"task_id": 1, "completion": "module axi_protocol_converter_v2_1_b2s_rd_cmd_fsm (input wire clk, input wire reset, output wire s_arready, input wire s_arvalid, input wire [7:0] s_arlen, output wire m_arvalid, input wire m_arready, output wire next, input wire next_pending, input wire data_ready, output wire a_push, output wire r_push);"}
{"task_id": 2, "completion": "module axi_data_fifo_v2_1_ndeep_srl #(\n   parameter         C_FAMILY  = \"rtl\", // FPGA Family\n   parameter         C_A_WIDTH = 1          // Address Width (>= 1)\n   )(\n   input  wire                 CLK, // Clock\n   input  wire [C_A_WIDTH-1:0] A,   // Address\n   input  wire                 CE,  // Clock Enable\n   input  wire                 D,   // Input Data\n   output wire                 Q    // Output Data\n   );"}
{"task_id": 3, "completion": "module dyn_pll # (parameter SPEED_MHZ = 25 )(\n\tinput CLKIN_IN,\n\toutput CLKFX1_OUT,\n\toutput CLKFX2_OUT,\n\toutput CLKDV_OUT,\n\toutput DCM_SP_LOCKED_OUT,\n\tinput dcm_progclk,\n\tinput dcm_progdata,\n\tinput dcm_progen,\n\tinput dcm_reset,\n\toutput dcm_progdone,\n\toutput dcm_locked,\n\toutput [2:1] dcm_status\n);"}
{"task_id": 22, "completion": "module edge_detector(              \n    input wire clk,                \n    input wire reset_n,            \n    input wire in,                 \n    input wire edge_detect,         \n    output reg out                  \n);"}
{"task_id": 19, "completion": "module soc_design_niosII_core_cpu_debug_slave_tck (\n    input wire [31:0] MonDReg,\n    input wire [31:0] break_readreg,\n    input wire dbrk_hit0_latch,\n    input wire dbrk_hit1_latch,\n    input wire dbrk_hit2_latch,\n    input wire dbrk_hit3_latch,\n    input wire debugack,\n    input wire [1:0] ir_in,\n    input wire jtag_state_rti,\n    input wire monitor_error,\n    input wire monitor_ready,\n    input wire reset_n,\n    input wire resetlatch,\n    input wire tck,\n    input wire tdi,\n    input wire tracemem_on,\n    input wire [35:0] tracemem_trcdata,\n    input wire tracemem_tw,\n    input wire [6:0] trc_im_addr,\n    input wire trc_on,\n    input wire trc_wrap,\n    input wire trigbrktype,\n    input wire trigger_state_1,\n    input wire vs_cdr,\n    input wire vs_sdr,\n    input wire vs_uir,\n    output reg [1:0] ir_out,\n    output wire jrst_n,\n    output reg [37:0] sr,\n    output wire st_ready_test_idle,\n    output wire tdo\n);"}
{"task_id": 18, "completion": "module sqrt_pipelined(\n   input clk,            // clock\n   input reset_n,        // asynchronous reset\n   input start,          // optional start signal\n   input [INPUT_BITS-1:0] radicand,   // unsigned radicand\n   output reg data_valid, // optional data valid signal\n   output reg [OUTPUT_BITS-1:0] root    // unsigned root \n);"}
{"task_id": 4, "completion": "module traffic;  \nparameter on = 1, off = 0, red_tics = 35,  \n          amber_tics = 3, green_tics = 20;  \nreg clock, red, amber, green;"}
{"task_id": 24, "completion": "module Priority_Codec_64(\n    input wire [54:0]  Data_Dec_i,\n    output reg [5:0] Data_Bin_o\n    );"}
{"task_id": 23, "completion": "module vga (input wb_clk_i, input wb_rst_i, input [15:0] wb_dat_i, output [15:0] wb_dat_o, input [16:1] wb_adr_i, input wb_we_i, input wb_tga_i, input [1:0] wb_sel_i, input wb_stb_i, input wb_cyc_i, output wb_ack_o, output [3:0] vga_red_o, output [3:0] vga_green_o, output [3:0] vga_blue_o, output horiz_sync, output vert_sync, output [17:1] csrm_adr_o, output [1:0] csrm_sel_o, output csrm_we_o, output [15:0] csrm_dat_o, input [15:0] csrm_dat_i);"}
{"task_id": 0, "completion": "module axi_protocol_converter_v2_1_b2s_simple_fifo #(\n  parameter C_WIDTH  = 8,\n  parameter C_AWIDTH = 4,\n  parameter C_DEPTH  = 16\n)\n(\n  input  wire               clk,\n  input  wire               rst,\n  input  wire               wr_en,\n  input  wire               rd_en,\n  input  wire [C_WIDTH-1:0] din,\n  output wire [C_WIDTH-1:0] dout,\n  output wire               a_full,\n  output wire               full,\n  output wire               a_empty,\n  output wire               empty\n);"}
{"task_id": 25, "completion": "module control(              input clk,                input en,                output [1:0] dsp_sel,                output [3:0] an            );"}
{"task_id": 28, "completion": "module NIOS_SYSTEMV3_CH0_THRESH (\n    input   [  1: 0] address,\n    input            chipselect,\n    input            clk,\n    input            reset_n,\n    input            write_n,\n    input   [ 31: 0] writedata,\n    output  [ 23: 0] out_port,\n    output  [ 31: 0] readdata\n);"}
{"task_id": 27, "completion": "module Approx_adder_W16( add_sub, in1, in2, res );\n  input [15:0] in1;\n  input [15:0] in2;\n  output [16:0] res;\n  input add_sub;"}
{"task_id": 17, "completion": "module FSM_Add_Subtract(\n    input wire clk,\n    input wire rst,\n    input wire rst_FSM,\n    input wire beg_FSM,\n    input wire zero_flag_i,\n    input wire norm_iteration_i,\n    input wire add_overflow_i,\n    input wire round_i,\n    output wire load_1_o,\n    output wire load_2_o,\n    output reg load_3_o,\n    output reg load_8_o,\n    output reg A_S_op_o,\n    output reg load_4_o,\n    output reg left_right_o,\n    output reg bit_shift_o,\n    output reg load_5_o,\n    output reg load_6_o,\n    output reg load_7_o,\n    output reg ctrl_a_o,\n    output reg [1:0] ctrl_b_o,\n    output reg ctrl_b_load_o,\n    output reg ctrl_c_o,\n    output reg ctrl_d_o,\n    output reg rst_int,\n    output reg ready\n);"}
{"task_id": 29, "completion": "module GS_cpld(                               \n    output wire        config_n,          \n    input  wire        status_n,          \n    input  wire        conf_done,         \n    output wire        cs,                \n    input  wire        init_done,         \n    input  wire        clk24in,          \n    input  wire        clk20in,          \n    input  wire        clksel0,          \n    input  wire        clksel1,          \n    output wire        clkout,            \n    input  wire        clkin,            \n    input  wire        coldres_n,        \n    output wire        warmres_n,        \n    input  wire        iorq_n,           \n    input  wire        mreq_n,           \n    input  wire        rd_n,             \n    input  wire        wr_n,             \n    inout  wire [ 7:0] d,                 \n    input  wire        a6,                \n    input  wire        a7,                \n    input  wire        a10,               \n    input  wire        a11,               \n    input  wire        a12,               \n    input  wire        a13,               \n    input  wire        a14,               \n    input  wire        a15,               \n    output wire        mema14,           \n    output wire        mema15,           \n    output wire        mema19,           \n    inout  wire        romcs_n,          \n    inout  wire        memoe_n,          \n    inout  wire        memwe_n,          \n    input  wire        in_ramcs0_n,     \n    input  wire        in_ramcs1_n,     \n    input  wire        in_ramcs2_n,     \n    input  wire        in_ramcs3_n,     \n    output wire        out_ramcs0_n,    \n    output wire        out_ramcs1_n,    \n    output wire        ra6,              \n    output wire        ra7,              \n    output wire        ra10,             \n    output wire        ra11,             \n    output wire        ra12,             \n    output wire        ra13,             \n    inout  wire [ 7:0] rd                 \n);"}
{"task_id": 8, "completion": "module altera_avalon_sc_fifo #(\n    parameter SYMBOLS_PER_BEAT  = 1,\n    parameter BITS_PER_SYMBOL   = 8,\n    parameter FIFO_DEPTH        = 16,\n    parameter CHANNEL_WIDTH     = 0,\n    parameter ERROR_WIDTH       = 0,\n    parameter USE_PACKETS       = 0,\n    parameter USE_FILL_LEVEL    = 0,\n    parameter USE_STORE_FORWARD = 0,\n    parameter USE_ALMOST_FULL_IF = 0,\n    parameter USE_ALMOST_EMPTY_IF = 0,\n    parameter EMPTY_LATENCY     = 3,\n    parameter USE_MEMORY_BLOCKS = 1,\n    parameter DATA_WIDTH  = SYMBOLS_PER_BEAT * BITS_PER_SYMBOL,\n    parameter EMPTY_WIDTH = log2ceil(SYMBOLS_PER_BEAT)\n)(\n    input                       clk,\n    input                       reset,\n    input [DATA_WIDTH-1: 0]     in_data,\n    input                       in_valid,\n    input                       in_startofpacket,\n    input                       in_endofpacket,\n    input [((EMPTY_WIDTH>0) ? (EMPTY_WIDTH-1):0) : 0]     in_empty,\n    input [((ERROR_WIDTH>0) ? (ERROR_WIDTH-1):0) : 0]     in_error,\n    input [((CHANNEL_WIDTH>0) ? (CHANNEL_WIDTH-1):0): 0]  in_channel,\n    output                      in_ready,\n    output [DATA_WIDTH-1 : 0]   out_data,\n    output reg                  out_valid,\n    output                      out_startofpacket,\n    output                      out_endofpacket,\n    output [((EMPTY_WIDTH>0) ? (EMPTY_WIDTH-1):0) : 0]    out_empty,\n    output [((ERROR_WIDTH>0) ? (ERROR_WIDTH-1):0) : 0]    out_error,\n    output [((CHANNEL_WIDTH>0) ? (CHANNEL_WIDTH-1):0): 0] out_channel,\n    input                       out_ready,\n    input [(USE_STORE_FORWARD ? 2 : 1) : 0]   csr_address,\n    input                       csr_write,\n    input                       csr_read,\n    input [31 : 0]              csr_writedata,\n    output reg [31 : 0]         csr_readdata,\n    output  wire                almost_full_data,\n    output  wire                almost_empty_data\n);"}
{"task_id": 26, "completion": "module axi_protocol_converter_v2_1_axi3_conv #(\n   parameter C_FAMILY = \"none\",\n   parameter integer C_AXI_ID_WIDTH = 1,\n   parameter integer C_AXI_ADDR_WIDTH = 32,\n   parameter integer C_AXI_DATA_WIDTH = 32,\n   parameter integer C_AXI_SUPPORTS_USER_SIGNALS = 0,\n   parameter integer C_AXI_AWUSER_WIDTH = 1,\n   parameter integer C_AXI_ARUSER_WIDTH = 1,\n   parameter integer C_AXI_WUSER_WIDTH = 1,\n   parameter integer C_AXI_RUSER_WIDTH = 1,\n   parameter integer C_AXI_BUSER_WIDTH = 1,\n   parameter integer C_AXI_SUPPORTS_WRITE = 1,\n   parameter integer C_AXI_SUPPORTS_READ = 1,\n   parameter integer C_SUPPORT_SPLITTING = 1,\n   parameter integer C_SUPPORT_BURSTS = 1,\n   parameter integer C_SINGLE_THREAD = 1\n)(\n   input wire ACLK,\n   input wire ARESETN,\n   input  wire [C_AXI_ID_WIDTH-1:0] S_AXI_AWID,\n   input  wire [C_AXI_ADDR_WIDTH-1:0] S_AXI_AWADDR,\n   input  wire [8-1:0] S_AXI_AWLEN,\n   input  wire [3-1:0] S_AXI_AWSIZE,\n   input  wire [2-1:0] S_AXI_AWBURST,\n   input  wire [1-1:0] S_AXI_AWLOCK,\n   input  wire [4-1:0] S_AXI_AWCACHE,\n   input  wire [3-1:0] S_AXI_AWPROT,\n   input  wire [4-1:0] S_AXI_AWQOS,\n   input  wire [C_AXI_AWUSER_WIDTH-1:0] S_AXI_AWUSER,\n   input  wire S_AXI_AWVALID,\n   output wire S_AXI_AWREADY,\n   input  wire [C_AXI_DATA_WIDTH-1:0] S_AXI_WDATA,\n   input  wire [C_AXI_DATA_WIDTH/8-1:0] S_AXI_WSTRB,\n   input  wire S_AXI_WLAST,\n   input  wire [C_AXI_WUSER_WIDTH-1:0] S_AXI_WUSER,\n   input  wire S_AXI_WVALID,\n   output wire S_AXI_WREADY,\n   output wire [C_AXI_ID_WIDTH-1:0] S_AXI_BID,\n   output wire [2-1:0] S_AXI_BRESP,\n   output wire [C_AXI_BUSER_WIDTH-1:0] S_AXI_BUSER,\n   output wire S_AXI_BVALID,\n   input  wire S_AXI_BREADY,\n   input  wire [C_AXI_ID_WIDTH-1:0] S_AXI_ARID,\n   input  wire [C_AXI_ADDR_WIDTH-1:0] S_AXI_ARADDR,\n   input  wire [8-1:0] S_AXI_ARLEN,\n   input  wire [3-1:0] S_AXI_ARSIZE,\n   input  wire [2-1:0] S_AXI_ARBURST,\n   input  wire [1-1:0] S_AXI_ARLOCK,\n   input  wire [4-1:0] S_AXI_ARCACHE,\n   input  wire [3-1:0] S_AXI_ARPROT,\n   input  wire [4-1:0] S_AXI_ARQOS,\n   input  wire [C_AXI_ARUSER_WIDTH-1:0] S_AXI_ARUSER,\n   input  wire S_AXI_ARVALID,\n   output wire S_AXI_ARREADY,\n   output wire [C_AXI_ID_WIDTH-1:0] S_AXI_RID,\n   output wire [C_AXI_DATA_WIDTH-1:0] S_AXI_RDATA,\n   output wire [2-1:0] S_AXI_RRESP,\n   output wire S_AXI_RLAST,\n   output wire [C_AXI_RUSER_WIDTH-1:0] S_AXI_RUSER,\n   output wire S_AXI_RVALID,\n   input  wire S_AXI_RREADY,\n   output wire [C_AXI_ID_WIDTH-1:0] M_AXI_AWID,\n   output wire [C_AXI_ADDR_WIDTH-1:0] M_AXI_AWADDR,\n   output wire [4-1:0] M_AXI_AWLEN,\n   output wire [3-1:0] M_AXI_AWSIZE,\n   output wire [2-1:0] M_AXI_AWBURST,\n   output wire [2-1:0] M_AXI_AWLOCK,\n   output wire [4-1:0] M_AXI_AWCACHE,\n   output wire [3-1:0] M_AXI_AWPROT,\n   output wire [4-1:0] M_AXI_AWQOS,\n   output wire [C_AXI_AWUSER_WIDTH-1:0] M_AXI_AWUSER,\n   output wire M_AXI_AWVALID,\n   input  wire M_AXI_AWREADY,\n   output wire [C_AXI_ID_WIDTH-1:0] M_AXI_WID,\n   output wire [C_AXI_DATA_WIDTH-1:0] M_AXI_WDATA,\n   output wire [C_AXI_DATA_WIDTH/8-1:0] M_AXI_WSTRB,\n   output wire M_AXI_WLAST,\n   output wire [C_AXI_WUSER_WIDTH-1:0] M_AXI_WUSER,\n   output wire M_AXI_WVALID,\n   input  wire M_AXI_WREADY,\n   input  wire [C_AXI_ID_WIDTH-1:0] M_AXI_BID,\n   input  wire [2-1:0] M_AXI_BRESP,\n   input  wire [C_AXI_BUSER_WIDTH-1:0] M_AXI_BUSER,\n   input  wire M_AXI_BVALID,\n   output wire M_AXI_BREADY,\n   output wire [C_AXI_ID_WIDTH-1:0] M_AXI_ARID,\n   output wire [C_AXI_ADDR_WIDTH-1:0] M_AXI_ARADDR,\n   output wire [4-1:0] M_AXI_ARLEN,\n   output wire [3-1:0] M_AXI_ARSIZE,\n   output wire [2-1:0] M_AXI_ARBURST,\n   output wire [2-1:0] M_AXI_ARLOCK,\n   output wire [4-1:0] M_AXI_ARCACHE,\n   output wire [3-1:0] M_AXI_ARPROT,\n   output wire [4-1:0] M_AXI_ARQOS,\n   output wire [C_AXI_ARUSER_WIDTH-1:0] M_AXI_ARUSER,\n   output wire M_AXI_ARVALID,\n   input  wire M_AXI_ARREADY,\n   input  wire [C_AXI_ID_WIDTH-1:0] M_AXI_RID,\n   input  wire [C_AXI_DATA_WIDTH-1:0] M_AXI_RDATA,\n   input  wire [2-1:0] M_AXI_RRESP,\n   input  wire M_AXI_RLAST,\n   input  wire [C_AXI_RUSER_WIDTH-1:0] M_AXI_RUSER,\n   input  wire M_AXI_RVALID,\n   output wire M_AXI_RREADY\n   );"}
{"task_id": 7, "completion": "module zc702_auto_us_df_1 (\n  input wire s_axi_aclk,\n  input wire s_axi_aresetn,\n  input wire [31 : 0] s_axi_awaddr,\n  input wire [7 : 0] s_axi_awlen,\n  input wire [2 : 0] s_axi_awsize,\n  input wire [1 : 0] s_axi_awburst,\n  input wire [0 : 0] s_axi_awlock,\n  input wire [3 : 0] s_axi_awcache,\n  input wire [2 : 0] s_axi_awprot,\n  input wire [3 : 0] s_axi_awregion,\n  input wire [3 : 0] s_axi_awqos,\n  input wire s_axi_awvalid,\n  output wire s_axi_awready,\n  input wire [31 : 0] s_axi_wdata,\n  input wire [3 : 0] s_axi_wstrb,\n  input wire s_axi_wlast,\n  input wire s_axi_wvalid,\n  output wire s_axi_wready,\n  output wire [1 : 0] s_axi_bresp,\n  output wire s_axi_bvalid,\n  input wire s_axi_bready,\n  input wire [31 : 0] s_axi_araddr,\n  input wire [7 : 0] s_axi_arlen,\n  input wire [2 : 0] s_axi_arsize,\n  input wire [1 : 0] s_axi_arburst,\n  input wire [0 : 0] s_axi_arlock,\n  input wire [3 : 0] s_axi_arcache,\n  input wire [2 : 0] s_axi_arprot,\n  input wire [3 : 0] s_axi_arregion,\n  input wire [3 : 0] s_axi_arqos,\n  input wire s_axi_arvalid,\n  output wire s_axi_arready,\n  output wire [31 : 0] s_axi_rdata,\n  output wire [1 : 0] s_axi_rresp,\n  output wire s_axi_rlast,\n  output wire s_axi_rvalid,\n  input wire s_axi_rready,\n  output wire [31 : 0] m_axi_awaddr,\n  output wire [7 : 0] m_axi_awlen,\n  output wire [2 : 0] m_axi_awsize,\n  output wire [1 : 0] m_axi_awburst,\n  output wire [0 : 0] m_axi_awlock,\n  output wire [3 : 0] m_axi_awcache,\n  output wire [2 : 0] m_axi_awprot,\n  output wire [3 : 0] m_axi_awregion,\n  output wire [3 : 0] m_axi_awqos,\n  output wire m_axi_awvalid,\n  input wire m_axi_awready,\n  output wire [63 : 0] m_axi_wdata,\n  output wire [7 : 0] m_axi_wstrb,\n  output wire m_axi_wlast,\n  output wire m_axi_wvalid,\n  input wire m_axi_wready,\n  input wire [1 : 0] m_axi_bresp,\n  input wire m_axi_bvalid,\n  output wire m_axi_bready,\n  output wire [31 : 0] m_axi_araddr,\n  output wire [7 : 0] m_axi_arlen,\n  output wire [2 : 0] m_axi_arsize,\n  output wire [1 : 0] m_axi_arburst,\n  output wire [0 : 0] m_axi_arlock,\n  output wire [3 : 0] m_axi_arcache,\n  output wire [2 : 0] m_axi_arprot,\n  output wire [3 : 0] m_axi_arregion,\n  output wire [3 : 0] m_axi_arqos,\n  output wire m_axi_arvalid,\n  input wire m_axi_arready,\n  input wire [63 : 0] m_axi_rdata,\n  input wire [1 : 0] m_axi_rresp,\n  input wire m_axi_rlast,\n  input wire m_axi_rvalid,\n  output wire m_axi_rready\n);"}
{"task_id": 6, "completion": "module cpx_buf_p3(/*AUTOARG*/\n   // Outputs\n   output [7:0] scache3_cpx_req_bufp3_cq,\n   output scache3_cpx_atom_bufp3_cq,\n   output [7:0] io_cpx_req_bufp3_cq,\n   output [7:0] cpx_scache3_grant_bufp3_ca_l,\n   output cpx_spc5_data_rdy_bufp3_cx,\n   output cpx_spc6_data_rdy_bufp3_cx,\n   output cpx_spc7_data_rdy_bufp3_cx,\n   output arbcp0_cpxdp_grant_bufp3_ca_l_5,\n   output arbcp0_cpxdp_q0_hold_bufp3_ca_5,\n   output arbcp0_cpxdp_qsel0_bufp3_ca_l_5,\n   output arbcp0_cpxdp_qsel1_bufp3_ca_5,\n   output arbcp0_cpxdp_shift_bufp3_cx_l_5,\n   output arbcp1_cpxdp_grant_bufp3_ca_l_5,\n   output arbcp1_cpxdp_q0_hold_bufp3_ca_5,\n   output arbcp1_cpxdp_qsel0_bufp3_ca_l_5,\n   output arbcp1_cpxdp_qsel1_bufp3_ca_5,\n   output arbcp1_cpxdp_shift_bufp3_cx_l_5,\n   output arbcp2_cpxdp_grant_bufp3_ca_l_5,\n   output arbcp2_cpxdp_q0_hold_bufp3_ca_5,\n   output arbcp2_cpxdp_qsel0_bufp3_ca_l_5,\n   output arbcp2_cpxdp_qsel1_bufp3_ca_5,\n   output arbcp2_cpxdp_shift_bufp3_cx_l_5,\n   output arbcp3_cpxdp_grant_bufp3_ca_l_5,\n   output arbcp3_cpxdp_q0_hold_bufp3_ca_5,\n   output arbcp3_cpxdp_qsel0_bufp3_ca_l_5,\n   output arbcp3_cpxdp_qsel1_bufp3_ca_5,\n   output arbcp3_cpxdp_shift_bufp3_cx_l_5,\n   output arbcp4_cpxdp_grant_bufp3_ca_l_5,\n   output arbcp4_cpxdp_q0_hold_bufp3_ca_5,\n   output arbcp4_cpxdp_qsel0_bufp3_ca_l_5,\n   output arbcp4_cpxdp_qsel1_bufp3_ca_5,\n   output arbcp4_cpxdp_shift_bufp3_cx_l_5,\n   output arbcp5_cpxdp_grant_bufp3_ca_l_5,\n   output arbcp5_cpxdp_q0_hold_bufp3_ca_5,\n   output arbcp5_cpxdp_qsel0_bufp3_ca_l_5,\n   output arbcp5_cpxdp_qsel1_bufp3_ca_5,\n   output arbcp5_cpxdp_shift_bufp3_cx_l_5,\n   output arbcp6_cpxdp_grant_bufp3_ca_l_5,\n   output arbcp6_cpxdp_q0_hold_bufp3_ca_5,\n   output arbcp6_cpxdp_qsel0_bufp3_ca_l_5,\n   output arbcp6_cpxdp_qsel1_bufp3_ca_5,\n   output arbcp6_cpxdp_shift_bufp3_cx_l_5,\n   output arbcp7_cpxdp_grant_bufp3_ca_l_5,\n   output arbcp7_cpxdp_q0_hold_bufp3_ca_5,\n   output arbcp7_cpxdp_qsel0_bufp3_ca_l_5,\n   output arbcp7_cpxdp_qsel1_bufp3_ca_5,\n   output arbcp7_cpxdp_shift_bufp3_cx_l_5,\n   output arbcp0_cpxdp_grant_bufp3_ca_l_2,\n   output arbcp0_cpxdp_q0_hold_bufp3_ca_2,\n   output arbcp0_cpxdp_qsel0_bufp3_ca_l_2,\n   output arbcp0_cpxdp_qsel1_bufp3_ca_2,\n   output arbcp0_cpxdp_shift_bufp3_cx_l_2,\n   output arbcp1_cpxdp_grant_bufp3_ca_l_2,\n   output arbcp1_cpxdp_q0_hold_bufp3_ca_2,\n   output arbcp1_cpxdp_qsel0_bufp3_ca_l_2,\n   output arbcp1_cpxdp_qsel1_bufp3_ca_2,\n   output arbcp1_cpxdp_shift_bufp3_cx_l_2,\n   output arbcp2_cpxdp_grant_bufp3_ca_l_2,\n   output arbcp2_cpxdp_q0_hold_bufp3_ca_2,\n   output arbcp2_cpxdp_qsel0_bufp3_ca_l_2,\n   output arbcp2_cpxdp_qsel1_bufp3_ca_2,\n   output arbcp2_cpxdp_shift_bufp3_cx_l_2,\n   output arbcp3_cpxdp_grant_bufp3_ca_l_2,\n   output arbcp3_cpxdp_q0_hold_bufp3_ca_2,\n   output arbcp3_cpxdp_qsel0_bufp3_ca_l_2,\n   output arbcp3_cpxdp_qsel1_bufp3_ca_2,\n   output arbcp3_cpxdp_shift_bufp3_cx_l_2,\n   output arbcp4_cpxdp_grant_bufp3_ca_l_2,\n   output arbcp4_cpxdp_q0_hold_bufp3_ca_2,\n   output arbcp4_cpxdp_qsel0_bufp3_ca_l_2,\n   output arbcp4_cpxdp_qsel1_bufp3_ca_2,\n   output arbcp4_cpxdp_shift_bufp3_cx_l_2,\n   output arbcp5_cpxdp_grant_bufp3_ca_l_2,\n   output arbcp5_cpxdp_q0_hold_bufp3_ca_2,\n   output arbcp5_cpxdp_qsel0_bufp3_ca_l_2,\n   output arbcp5_cpxdp_qsel1_bufp3_ca_2,\n   output arbcp5_cpxdp_shift_bufp3_cx_l_2,\n   output arbcp6_cpxdp_grant_bufp3_ca_l_2,\n   output arbcp6_cpxdp_q0_hold_bufp3_ca_2,\n   output arbcp6_cpxdp_qsel0_bufp3_ca_l_2,\n   output arbcp6_cpxdp_qsel1_bufp3_ca_2,\n   output arbcp6_cpxdp_shift_bufp3_cx_l_2,\n   output arbcp7_cpxdp_grant_bufp3_ca_l_2,\n   output arbcp7_cpxdp_q0_hold_bufp3_ca_2,\n   output arbcp7_cpxdp_qsel0_bufp3_ca_l_2,\n   output arbcp7_cpxdp_qsel1_bufp3_ca_2,\n   output arbcp7_cpxdp_shift_bufp3_cx_l_2,\n   // Inputs\n   input [7:0] scache3_cpx_req_bufp4_cq,\n   input scache3_cpx_atom_bufp4_cq,\n   input [7:0] io_cpx_req_bufp4_cq,\n   input [7:0] cpx_scache3_grant_ca,\n   input cpx_spc5_data_rdy_cx,\n   input cpx_spc6_data_rdy_cx,\n   input cpx_spc7_data_rdy_cx,\n   input arbcp0_cpxdp_grant_arbbf_ca_5,\n   input arbcp0_cpxdp_q0_hold_arbbf_ca_l_5,\n   input arbcp0_cpxdp_qsel0_arbbf_ca_5,\n   input arbcp0_cpxdp_qsel1_arbbf_ca_l_5,\n   input arbcp0_cpxdp_shift_arbbf_cx_5,\n   input arbcp1_cpxdp_grant_arbbf_ca_5,\n   input arbcp1_cpxdp_q0_hold_arbbf_ca_l_5,\n   input arbcp1_cpxdp_qsel0_arbbf_ca_5,\n   input arbcp1_cpxdp_qsel1_arbbf_ca_l_5,\n   input arbcp1_cpxdp_shift_arbbf_cx_5,\n   input arbcp2_cpxdp_grant_arbbf_ca_5,\n   input arbcp2_cpxdp_q0_hold_arbbf_ca_l_5,\n   input arbcp2_cpxdp_qsel0_arbbf_ca_5,\n   input arbcp2_cpxdp_qsel1_arbbf_ca_l_5,\n   input arbcp2_cpxdp_shift_arbbf_cx_5,\n   input arbcp3_cpxdp_grant_arbbf_ca_5,\n   input arbcp3_cpxdp_q0_hold_arbbf_ca_l_5,\n   input arbcp3_cpxdp_qsel0_arbbf_ca_5,\n   input arbcp3_cpxdp_qsel1_arbbf_ca_l_5,\n   input arbcp3_cpxdp_shift_arbbf_cx_5,\n   input arbcp4_cpxdp_grant_arbbf_ca_5,\n   input arbcp4_cpxdp_q0_hold_arbbf_ca_l_5,\n   input arbcp4_cpxdp_qsel0_arbbf_ca_5,\n   input arbcp4_cpxdp_qsel1_arbbf_ca_l_5,\n   input arbcp4_cpxdp_shift_arbbf_cx_5,\n   input arbcp5_cpxdp_grant_arbbf_ca_5,\n   input arbcp5_cpxdp_q0_hold_arbbf_ca_l_5,\n   input arbcp5_cpxdp_qsel0_arbbf_ca_5,\n   input arbcp5_cpxdp_qsel1_arbbf_ca_l_5,\n   input arbcp5_cpxdp_shift_arbbf_cx_5,\n   input arbcp6_cpxdp_grant_arbbf_ca_5,\n   input arbcp6_cpxdp_q0_hold_arbbf_ca_l_5,\n   input arbcp6_cpxdp_qsel0_arbbf_ca_5,\n   input arbcp6_cpxdp_qsel1_arbbf_ca_l_5,\n   input arbcp6_cpxdp_shift_arbbf_cx_5,\n   input arbcp7_cpxdp_grant_arbbf_ca_5,\n   input arbcp7_cpxdp_q0_hold_arbbf_ca_l_5,\n   input arbcp7_cpxdp_qsel0_arbbf_ca_5,\n   input arbcp7_cpxdp_qsel1_arbbf_ca_l_5,\n   input arbcp7_cpxdp_shift_arbbf_cx_5,\n   input arbcp0_cpxdp_grant_arbbf_ca_2,\n   input arbcp0_cpxdp_q0_hold_arbbf_ca_l_2,\n   input arbcp0_cpxdp_qsel0_arbbf_ca_2,\n   input arbcp0_cpxdp_qsel1_arbbf_ca_l_2,\n   input arbcp0_cpxdp_shift_arbbf_cx_2,\n   input arbcp1_cpxdp_grant_arbbf_ca_2,\n   input arbcp1_cpxdp_q0_hold_arbbf_ca_l_2,\n   input arbcp1_cpxdp_qsel0_arbbf_ca_2,\n   input arbcp1_cpxdp_qsel1_arbbf_ca_l_2,\n   input arbcp1_cpxdp_shift_arbbf_cx_2,\n   input arbcp2_cpxdp_grant_arbbf_ca_2,\n   input arbcp2_cpxdp_q0_hold_arbbf_ca_l_2,\n   input arbcp2_cpxdp_qsel0_arbbf_ca_2,\n   input arbcp2_cpxdp_qsel1_arbbf_ca_l_2,\n   input arbcp2_cpxdp_shift_arbbf_cx_2,\n   input arbcp3_cpxdp_grant_arbbf_ca_2,\n   input arbcp3_cpxdp_q0_hold_arbbf_ca_l_2,\n   input arbcp3_cpxdp_qsel0_arbbf_ca_2,\n   input arbcp3_cpxdp_qsel1_arbbf_ca_l_2,\n   input arbcp3_cpxdp_shift_arbbf_cx_2,\n   input arbcp4_cpxdp_grant_arbbf_ca_2,\n   input arbcp4_cpxdp_q0_hold_arbbf_ca_l_2,\n   input arbcp4_cpxdp_qsel0_arbbf_ca_2,\n   input arbcp4_cpxdp_qsel1_arbbf_ca_l_2,\n   input arbcp4_cpxdp_shift_arbbf_cx_2,\n   input arbcp5_cpxdp_grant_arbbf_ca_2,\n   input arbcp5_cpxdp_q0_hold_arbbf_ca_l_2,\n   input arbcp5_cpxdp_qsel0_arbbf_ca_2,\n   input arbcp5_cpxdp_qsel1_arbbf_ca_l_2,\n   input arbcp5_cpxdp_shift_arbbf_cx_2,\n   input arbcp6_cpxdp_grant_arbbf_ca_2,\n   input arbcp6_cpxdp_q0_hold_arbbf_ca_l_2,\n   input arbcp6_cpxdp_qsel0_arbbf_ca_2,\n   input arbcp6_cpxdp_qsel1_arbbf_ca_l_2,\n   input arbcp6_cpxdp_shift_arbbf_cx_2,\n   input arbcp7_cpxdp_grant_arbbf_ca_2,\n   input arbcp7_cpxdp_q0_hold_arbbf_ca_l_2,\n   input arbcp7_cpxdp_qsel0_arbbf_ca_2,\n   input arbcp7_cpxdp_qsel1_arbbf_ca_l_2,\n   input arbcp7_cpxdp_shift_arbbf_cx_2\n);"}
